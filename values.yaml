## Reaction Commerce standard image version
## ref: https://hub.docker.com/r/reactioncommerce/reaction/tags/
##
image: reactioncommerce/reaction:v1.5.10

## Specify a imagePullPolicy
## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
##
# imagePullPolicy:

## Host for the application
##
# host:

# Main ReactionCommerce configuration:
config:
  #Admin login information
  REACTION_EMAIL:
  REACTION_USER:
  REACTION_AUTH:
  #Set to DEBUG as necessary
  REACTION_LOG_LEVEL:
  #Set here to override UI if necessary
  SMTP_Host:
  SMTP_Port:
  SMTP_Username:
  SMTP_Password:

##
## MongoDB chart configuration
##
mongodb:
  ## MongoDB admin password
  ### ref: https://github.com/bitnami/bitnami-docker-mongodb/blob/master/README.md#setting-the-root-password-on-first-run
  ###
  ## mongodbRootPassword:
  #
  ## MongoDB custom user and database
  ## ref: https://github.com/bitnami/bitnami-docker-mongodb/blob/master/README.md#creating-a-user-and-database-on-first-run
  ##
  # mongodbUsername:
  # mongodbPassword:
  # mongodbDatabase:
  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ##
    # storageClass:
    accessMode: ReadWriteOnce
    size: 8Gi

# ## Enable persistence using Persistent Volume Claims
# ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
# ##
# persistence:
#   enabled: true
#   ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
#   ##
#   # storageClass:
#   accessMode: ReadWriteOnce
#   size: 8Gi

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
# resources:
#   requests:
#     memory: 512Mi
#     cpu: 300m

## Configure the ingress object to hook into existing infastructure
### ref : http://kubernetes.io/docs/user-guide/ingress/
###
ingress:
  enabled: false
  tls: false
  annotations:
    kubernetes.io/ingress.class: "nginx"
    # ingress.kubernetes.io/ssl-redirect: "true"
    # ingress.kubernetes.io/proxy-body-size: "0"
    # ingress.kubernetes.io/proxy-read-timeout: "600"
    # ingress.kubernetes.io/proxy-send-timeout: "600"
    # ingress.kubernetes.io/proxy-buffer-size: "128k"
